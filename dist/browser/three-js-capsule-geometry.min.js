!(function(t, e) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = e(require("three-full/builds/Three.cjs.js")))
: "function" == typeof define && define.amd
? define(["three-full/builds/Three.cjs.js"], e)
: (t.THREESphereCubeBufferGeometry = e(t.THREE));
})(this, function(t) {
"use strict";
function e(e, r, o, a, s, i, h, u, n) {
t.BufferGeometry.call(this),
(this.type = "CapsuleBufferGeometry"),
(this.parameters = {
radiusTop: e,
radiusBottom: r,
height: o,
radialSegments: a,
heightSegments: s,
thetaStart: u,
thetaLength: n
}),
(e = void 0 !== e ? e : 1),
(r = void 0 !== r ? r : 1),
(o = void 0 !== o ? o : 2),
(a = Math.floor(a) || 8),
(s = Math.floor(s) || 1),
(i = Math.floor(i) || 2),
(h = Math.floor(h) || 2),
(u = void 0 !== u ? u : 0),
(n = void 0 !== n ? n : 2 * Math.PI);
var f = Math.acos((r - e) / o),
d = (a + 1) * (s + 1 + h + i),
p = a * (s + h + i) * 2 * 3,
y = new t.BufferAttribute(new (p > 65535 ? Uint32Array : Uint16Array)(p), 1),
v = new t.BufferAttribute(new Float32Array(3 * d), 3),
c = new t.BufferAttribute(new Float32Array(3 * d), 3),
l = new t.BufferAttribute(new Float32Array(2 * d), 2),
M = 0,
m = 0,
x = [],
b = o / 2;
!(function() {
var d,
p,
w = new t.Vector3(),
B = new t.Vector3(),
A = Math.cos(f),
X = Math.sin(f),
z = new t.Vector2(e * X, b + e * A)
.sub(new t.Vector2(r * X, r * A - b))
.length(),
I = e * f + z + r * (Math.PI / 2 - f),
g = 0;
for (p = 0; p <= i; p++) {
var G = [],
S = Math.PI / 2 - f * (p / i);
g += (e * f) / i;
var Y = Math.cos(S),
P = Math.sin(S),
j = Y * e;
for (d = 0; d <= a; d++) {
var F = d / a,
V = F * n + u,
Z = Math.sin(V),
C = Math.cos(V);
(B.x = j * Z),
(B.y = b + P * e),
(B.z = j * C),
v.setXYZ(M, B.x, B.y, B.z),
w.set(Y * Z, P, Y * C),
c.setXYZ(M, w.x, w.y, w.z),
l.setXY(M, F, 1 - g / I),
G.push(M),
M++;
}
x.push(G);
}
var T = o + A * e - A * r,
E = (X * (r - e)) / T;
for (p = 1; p <= s; p++) {
var G = [];
g += z / s;
var j = X * ((p * (r - e)) / s + e);
for (d = 0; d <= a; d++) {
var F = d / a,
V = F * n + u,
Z = Math.sin(V),
C = Math.cos(V);
(B.x = j * Z),
(B.y = b + A * e - (p * T) / s),
(B.z = j * C),
v.setXYZ(M, B.x, B.y, B.z),
w.set(Z, E, C).normalize(),
c.setXYZ(M, w.x, w.y, w.z),
l.setXY(M, F, 1 - g / I),
G.push(M),
M++;
}
x.push(G);
}
for (p = 1; p <= h; p++) {
var G = [],
S = Math.PI / 2 - f - (Math.PI - f) * (p / h);
g += (r * f) / h;
var Y = Math.cos(S),
P = Math.sin(S),
j = Y * r;
for (d = 0; d <= a; d++) {
var F = d / a,
V = F * n + u,
Z = Math.sin(V),
C = Math.cos(V);
(B.x = j * Z),
(B.y = P * r - b),
(B.z = j * C),
v.setXYZ(M, B.x, B.y, B.z),
w.set(Y * Z, P, Y * C),
c.setXYZ(M, w.x, w.y, w.z),
l.setXY(M, F, 1 - g / I),
G.push(M),
M++;
}
x.push(G);
}
for (d = 0; d < a; d++)
for (p = 0; p < i + s + h; p++) {
var L = x[p][d],
O = x[p + 1][d],
R = x[p + 1][d + 1],
H = x[p][d + 1];
y.setX(m, L),
m++,
y.setX(m, O),
m++,
y.setX(m, H),
m++,
y.setX(m, O),
m++,
y.setX(m, R),
m++,
y.setX(m, H),
m++;
}
})(),
this.setIndex(y),
this.addAttribute("position", v),
this.addAttribute("normal", c),
this.addAttribute("uv", l);
}
(t = t && t.hasOwnProperty("default") ? t.default : t),
(e.prototype = Object.create(t.BufferGeometry.prototype)),
(e.prototype.constructor = e);
var r = e;
function o(e, r, o, a, s, i, h) {
BufferGeometry.call(this),
(this.type = "SphereCubeBufferGeometry"),
(this.parameters = {
radius: e,
widthSegments: r,
heightSegments: o,
phiStart: a,
phiLength: s,
thetaStart: i,
thetaLength: h
});
var n = t.BoxBufferGeometry(1, 1, 1, r, o, o);
(e = e || 1),
(r = Math.max(3, Math.floor(r) || 8)),
(o = Math.max(2, Math.floor(o) || 6)),
(a = void 0 !== a ? a : 0),
(s = void 0 !== s ? s : 2 * Math.PI),
(i = void 0 !== i ? i : 0),
(h = void 0 !== h ? h : Math.PI);
var f,
d = 0,
p = new Vector3(),
y = new Vector3(),
c = [],
l = [],
M = [];
for (vIndex = 0; vIndex < n.vertices.lenght; v += 3)
(p.x = c[vIndex]),
(p.y = c[vIndex + 1]),
(p.z = c[vIndex + 2]),
p.normalize(),
y.set(p.x, p.y, p.z),
l.push(y.x, y.y, y.z),
M.push(u, 1 - v),
verticesRow.push(d++);
(f = n.indices),
this.setIndex(f),
this.addAttribute("position", new Float32BufferAttribute(c, 3)),
this.addAttribute("normal", new Float32BufferAttribute(l, 3)),
this.addAttribute("uv", new Float32BufferAttribute(M, 2));
}
(o.prototype = Object.create(t.BufferGeometry.prototype)),
(o.prototype.constructor = o);
var a = o;
return (t.CapsuleBufferGeometry = r), (t.SphereCubeBufferGeometry = a), a;
});
