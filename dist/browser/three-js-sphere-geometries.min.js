!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = t(require("three-full/builds/Three.cjs.js")))
: "function" == typeof define && define.amd
? define(["three-full/builds/Three.cjs.js"], t)
: (e.THREESphereGeometries = t(e.THREE));
})(this, function(e) {
"use strict";
function t(t, r) {
e.BufferGeometry.call(this),
(this.type = "IcosahedronBufferGeometry"),
(this.parameters = {radius: t, subdivisionsLevel: r}),
(t = t || 10);
var o,
u = new e.Vector3(),
s = new e.Vector3(),
h = [],
f = [],
i = [],
a = [];
function n(t, r) {
let o = new e.Vector3(f[3 * t], f[3 * t + 1], f[3 * t + 2]),
u = new e.Vector3(f[3 * r], f[3 * r + 1], f[3 * r + 2]),
s = new e.Vector3((o.x + u.x) / 2, (o.y + u.y) / 2, (o.z + u.z) / 2);
p(s.x, s.y, s.z);
}
function p(r, o, s) {
(u = new e.Vector3(r, o, s)).normalize(),
(u.x *= t),
(u.y *= t),
(u.z *= t),
f.push(u.x, u.y, u.z);
}
p(-1, (o = (1 + Math.sqrt(5)) / 2), 0),
p(1, o, 0),
p(-1, -o, 0),
p(1, -o, 0),
p(0, -1, o),
p(0, 1, o),
p(0, -1, -o),
p(0, 1, -o),
p(o, 0, -1),
p(o, 0, 1),
p(-o, 0, -1),
p(-o, 0, 1),
h.push(0, 11, 5),
h.push(0, 5, 1),
h.push(0, 1, 7),
h.push(0, 7, 10),
h.push(0, 10, 11),
h.push(1, 5, 9),
h.push(5, 11, 4),
h.push(11, 10, 2),
h.push(10, 7, 6),
h.push(7, 1, 8),
h.push(3, 9, 4),
h.push(3, 4, 2),
h.push(3, 2, 6),
h.push(3, 6, 8),
h.push(3, 8, 9),
h.push(4, 9, 5),
h.push(2, 4, 11),
h.push(6, 2, 10),
h.push(8, 6, 7),
h.push(9, 8, 1),
(function() {
for (var e = 0; e < r - 1; e++) {
var t = [];
for (let e = 0; e < h.length; e += 3) {
let r = h[e],
o = h[e + 1],
u = h[e + 2];
n(r, o), n(o, u), n(u, r);
let s = f.length / 3;
t.push(r, s - 3, s - 1),
t.push(o, s - 2, s - 3),
t.push(u, s - 1, s - 2),
t.push(s - 3, s - 2, s - 1);
}
h = t;
}
})(),
(function() {
for (let e = 0; e < f.length; e += 3) {
let t = f[e],
r = f[e + 1],
o = f[e + 2];
s.set(t, r, o).normalize(), i.push(s.x, s.y, s.z);
}
})(),
(function() {
let e = 0,
t = 0;
for (let r = 0; r < f.length; r += 3) {
let o = f[r],
u = f[r + 1],
s = f[r + 2];
(e = 0.5 + Math.atan2(s, o) / (2 * Math.PI)),
(t = 0.5 - Math.asin(u) / Math.PI),
a.push(e, t);
}
})(),
this.setIndex(h),
this.addAttribute("position", new e.Float32BufferAttribute(f, 3)),
this.addAttribute("normal", new e.Float32BufferAttribute(i, 3)),
this.addAttribute("uv", new e.Float32BufferAttribute(a, 2));
}
(e = e && e.hasOwnProperty("default") ? e.default : e),
(t.prototype = Object.create(e.BufferGeometry.prototype)),
(t.prototype.constructor = t);
var r = t;
function o(t, r) {
e.BufferGeometry.call(this),
(this.type = "SpherifiedCubeBufferGeometry"),
(this.parameters = {radius: t, widthHeightSegments: r});
var o = this;
(t = t || 1), (r = Math.max(3, Math.floor(r) || 8));
var u,
s = new e.Vector3(),
h = new e.Vector3(),
f = new e.Vector3(),
i = 0,
a = 0,
n = [],
p = [],
y = [];
c("z", "y", "x", -1, -1, 1, 1, 1, r, r, 0),
c("z", "y", "x", 1, -1, 1, 1, -1, r, r, 1),
c("x", "z", "y", 1, 1, 1, 1, 1, r, r, 2),
c("x", "z", "y", 1, -1, 1, 1, -1, r, r, 3),
c("x", "y", "z", 1, -1, 1, 1, 1, r, r, 4),
c("x", "y", "z", -1, -1, 1, 1, -1, r, r, 5);
var d = [],
l = [];
for (u = 0; u < p.length; u += 3)
(s.x = 2 * p[u]),
(s.y = 2 * p[u + 1]),
(s.z = 2 * p[u + 2]),
(h.x = s.x ** 2),
(h.y = s.y ** 2),
(h.z = s.z ** 2),
(s.x *= Math.sqrt(1 - 0.5 * (h.y + h.z) + (h.y * h.z) / 3) * t),
(s.y *= Math.sqrt(1 - 0.5 * (h.z + h.x) + (h.z * h.x) / 3) * t),
(s.z *= Math.sqrt(1 - 0.5 * (h.x + h.y) + (h.x * h.y) / 3) * t),
d.push(s.x, s.y, s.z),
f.set(s.x, s.y, s.z).normalize(),
l.push(f.x, f.y, f.z);
function c(t, r, u, s, h, f, d, l, c, z, x) {
var m,
b,
B = f / c,
v = d / z,
w = f / 2,
G = d / 2,
A = l / 2,
V = c + 1,
M = z + 1,
g = 0,
E = 0,
F = new e.Vector3();
for (b = 0; b < M; b++) {
var I = b * v - G;
for (m = 0; m < V; m++) {
var j = m * B - w;
(F[t] = j * s),
(F[r] = I * h),
(F[u] = A),
p.push(F.x, F.y, F.z),
(F[t] = 0),
(F[r] = 0),
(F[u] = l > 0 ? 1 : -1),
y.push(m / c),
y.push(1 - b / z),
(g += 1);
}
}
for (b = 0; b < z; b++)
for (m = 0; m < c; m++) {
var C = i + m + V * b,
H = i + m + V * (b + 1),
S = i + (m + 1) + V * (b + 1),
T = i + (m + 1) + V * b;
n.push(C, H, T), n.push(H, S, T), (E += 6);
}
o.addGroup(a, E, x), (a += E), (i += g);
}
this.setIndex(n),
this.addAttribute("position", new e.Float32BufferAttribute(d, 3)),
this.addAttribute("normal", new e.Float32BufferAttribute(l, 3)),
this.addAttribute("uv", new e.Float32BufferAttribute(y, 2));
}
(o.prototype = Object.create(e.BufferGeometry.prototype)),
(o.prototype.constructor = o);
var u = o;
function s(t, r) {
e.BufferGeometry.call(this),
(this.type = "NormalizedCubeBufferGeometry"),
(this.parameters = {radius: t, widthHeightSegments: r});
var o = this;
(t = t || 1), (r = Math.max(3, Math.floor(r) || 8));
var u,
s = new e.Vector3(),
h = new e.Vector3(),
f = 0,
i = 0,
a = [],
n = [],
p = [];
l("z", "y", "x", -1, -1, 1, 1, 1, r, r, 0),
l("z", "y", "x", 1, -1, 1, 1, -1, r, r, 1),
l("x", "z", "y", 1, 1, 1, 1, 1, r, r, 2),
l("x", "z", "y", 1, -1, 1, 1, -1, r, r, 3),
l("x", "y", "z", 1, -1, 1, 1, 1, r, r, 4),
l("x", "y", "z", -1, -1, 1, 1, -1, r, r, 5);
var y = [],
d = [];
for (u = 0; u < n.length; u += 3)
(s.x = n[u]),
(s.y = n[u + 1]),
(s.z = n[u + 2]),
s.normalize(),
(s.x *= t),
(s.y *= t),
(s.z *= t),
y.push(s.x, s.y, s.z),
h.set(s.x, s.y, s.z).normalize(),
d.push(h.x, h.y, h.z);
function l(t, r, u, s, h, y, d, l, c, z, x) {
var m,
b,
B = y / c,
v = d / z,
w = y / 2,
G = d / 2,
A = l / 2,
V = c + 1,
M = z + 1,
g = 0,
E = 0,
F = new e.Vector3();
for (b = 0; b < M; b++) {
var I = b * v - G;
for (m = 0; m < V; m++) {
var j = m * B - w;
(F[t] = j * s),
(F[r] = I * h),
(F[u] = A),
n.push(F.x, F.y, F.z),
(F[t] = 0),
(F[r] = 0),
(F[u] = l > 0 ? 1 : -1),
p.push(m / c),
p.push(1 - b / z),
(g += 1);
}
}
for (b = 0; b < z; b++)
for (m = 0; m < c; m++) {
var C = f + m + V * b,
H = f + m + V * (b + 1),
S = f + (m + 1) + V * (b + 1),
T = f + (m + 1) + V * b;
a.push(C, H, T), a.push(H, S, T), (E += 6);
}
o.addGroup(i, E, x), (i += E), (f += g);
}
this.setIndex(a),
this.addAttribute("position", new e.Float32BufferAttribute(y, 3)),
this.addAttribute("normal", new e.Float32BufferAttribute(d, 3)),
this.addAttribute("uv", new e.Float32BufferAttribute(p, 2));
}
(s.prototype = Object.create(e.BufferGeometry.prototype)),
(s.prototype.constructor = s);
var h = {
IcosahedronBufferGeometry: r,
SpherifiedCubeBufferGeometry: u,
NormalizedCubeBufferGeometry: s
};
return (
(THREE.IcosahedronBufferGeometry = h.IcosahedronBufferGeometry),
(THREE.SpherifiedCubeBufferGeometry = h.SpherifiedCubeBufferGeometry),
(THREE.NormalizedCubeBufferGeometry = h.NormalizedCubeBufferGeometry),
h
);
});
