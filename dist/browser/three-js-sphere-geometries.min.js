!(function(t, e) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = e(require("three-full/builds/Three.cjs.js")))
: "function" == typeof define && define.amd
? define(["three-full/builds/Three.cjs.js"], e)
: (t.THREESphereBufferGeometries = e(t.THREE));
})(this, function(t) {
"use strict";
function e(e, r) {
t.BufferGeometry.call(this),
(this.type = "NormalizedCubeBufferGeometry"),
(this.parameters = {radius: e, widthHeightSegments: r});
var o = this;
(e = e || 1), (r = Math.max(3, Math.floor(r) || 8));
var u,
s = new t.Vector3(),
h = new t.Vector3(),
i = 0,
f = 0,
a = [],
n = [],
p = [];
l("z", "y", "x", -1, -1, 1, 1, 1, r, r, 0),
l("z", "y", "x", 1, -1, 1, 1, -1, r, r, 1),
l("x", "z", "y", 1, 1, 1, 1, 1, r, r, 2),
l("x", "z", "y", 1, -1, 1, 1, -1, r, r, 3),
l("x", "y", "z", 1, -1, 1, 1, 1, r, r, 4),
l("x", "y", "z", -1, -1, 1, 1, -1, r, r, 5);
var y = [],
d = [];
for (u = 0; u < n.length; u += 3)
(s.x = n[u]),
(s.y = n[u + 1]),
(s.z = n[u + 2]),
s.normalize(),
(s.x *= e),
(s.y *= e),
(s.z *= e),
y.push(s.x, s.y, s.z),
h.set(s.x, s.y, s.z).normalize(),
d.push(h.x, h.y, h.z);
function l(e, r, u, s, h, y, d, l, c, x, z) {
var m,
b,
v = y / c,
w = d / x,
B = y / 2,
A = d / 2,
G = l / 2,
V = c + 1,
E = x + 1,
g = 0,
F = 0,
j = new t.Vector3();
for (b = 0; b < E; b++) {
var M = b * w - A;
for (m = 0; m < V; m++) {
var H = m * v - B;
(j[e] = H * s),
(j[r] = M * h),
(j[u] = G),
n.push(j.x, j.y, j.z),
(j[e] = 0),
(j[r] = 0),
(j[u] = l > 0 ? 1 : -1),
p.push(m / c),
p.push(1 - b / x),
(g += 1);
}
}
for (b = 0; b < x; b++)
for (m = 0; m < c; m++) {
var T = i + m + V * b,
q = i + m + V * (b + 1),
I = i + (m + 1) + V * (b + 1),
R = i + (m + 1) + V * b;
a.push(T, q, R), a.push(q, I, R), (F += 6);
}
o.addGroup(f, F, z), (f += F), (i += g);
}
this.setIndex(a),
this.addAttribute("position", new t.Float32BufferAttribute(y, 3)),
this.addAttribute("normal", new t.Float32BufferAttribute(d, 3)),
this.addAttribute("uv", new t.Float32BufferAttribute(p, 2));
}
(t = t && t.hasOwnProperty("default") ? t.default : t),
(e.prototype = Object.create(t.BufferGeometry.prototype)),
(e.prototype.constructor = e);
var r = e;
function o(e, r) {
t.BufferGeometry.call(this),
(this.type = "IcosahedronBufferGeometry"),
(this.parameters = {radius: e, subdivisionsLevel: r}),
(e = e || 10);
var o,
u = new t.Vector3(),
s = new t.Vector3(),
h = [],
i = [],
f = [];
function a(e, r) {
let o = new t.Vector3(i[3 * e], i[3 * e + 1], i[3 * e + 2]),
u = new t.Vector3(i[3 * r], i[3 * r + 1], i[3 * r + 2]),
s = new t.Vector3((o.x + u.x) / 2, (o.y + u.y) / 2, (o.z + u.z) / 2);
n(s.x, s.y, s.z);
}
function n(r, o, s) {
(u = new t.Vector3(r, o, s)).normalize(),
(u.x *= e),
(u.y *= e),
(u.z *= e),
i.push(u.x, u.y, u.z);
}
n(-1, (o = (1 + Math.sqrt(5)) / 2), 0),
n(1, o, 0),
n(-1, -o, 0),
n(1, -o, 0),
n(0, -1, o),
n(0, 1, o),
n(0, -1, -o),
n(0, 1, -o),
n(o, 0, -1),
n(o, 0, 1),
n(-o, 0, -1),
n(-o, 0, 1),
h.push(0, 11, 5),
h.push(0, 5, 1),
h.push(0, 1, 7),
h.push(0, 7, 10),
h.push(0, 10, 11),
h.push(1, 5, 9),
h.push(5, 11, 4),
h.push(11, 10, 2),
h.push(10, 7, 6),
h.push(7, 1, 8),
h.push(3, 9, 4),
h.push(3, 4, 2),
h.push(3, 2, 6),
h.push(3, 6, 8),
h.push(3, 8, 9),
h.push(4, 9, 5),
h.push(2, 4, 11),
h.push(6, 2, 10),
h.push(8, 6, 7),
h.push(9, 8, 1),
(function() {
for (var t = 0; t < r - 1; t++) {
var e = [];
for (let t = 0; t < h.length; t += 3) {
let r = h[t],
o = h[t + 1],
u = h[t + 2];
a(r, o), a(o, u), a(u, r);
let s = i.length / 3;
e.push(r, s - 3, s - 1),
e.push(o, s - 2, s - 3),
e.push(u, s - 1, s - 2),
e.push(s - 3, s - 2, s - 1);
}
h = e;
}
})(),
(function() {
for (let t = 0; t < i.length; t += 3) {
let e = i[t],
r = i[t + 1],
o = i[t + 2];
s.set(e, r, o).normalize(), f.push(s.x, s.y, s.z);
}
})(),
this.setIndex(h),
this.addAttribute("position", new t.Float32BufferAttribute(i, 3)),
this.addAttribute("normal", new t.Float32BufferAttribute(f, 3)),
this.addAttribute("uv", new t.Float32BufferAttribute([], 2));
}
(o.prototype = Object.create(t.BufferGeometry.prototype)),
(o.prototype.constructor = o);
var u = o;
function s(e, r) {
t.BufferGeometry.call(this),
(this.type = "SpherifiedCubeBufferGeometry"),
(this.parameters = {radius: e, widthHeightSegments: r});
var o = this;
(e = e || 1), (r = Math.max(3, Math.floor(r) || 8));
var u,
s = new t.Vector3(),
h = new t.Vector3(),
i = new t.Vector3(),
f = 0,
a = 0,
n = [],
p = [],
y = [];
c("z", "y", "x", -1, -1, 1, 1, 1, r, r, 0),
c("z", "y", "x", 1, -1, 1, 1, -1, r, r, 1),
c("x", "z", "y", 1, 1, 1, 1, 1, r, r, 2),
c("x", "z", "y", 1, -1, 1, 1, -1, r, r, 3),
c("x", "y", "z", 1, -1, 1, 1, 1, r, r, 4),
c("x", "y", "z", -1, -1, 1, 1, -1, r, r, 5);
var d = [],
l = [];
for (u = 0; u < p.length; u += 3)
(s.x = 2 * p[u]),
(s.y = 2 * p[u + 1]),
(s.z = 2 * p[u + 2]),
(h.x = s.x ** 2),
(h.y = s.y ** 2),
(h.z = s.z ** 2),
(s.x *= Math.sqrt(1 - 0.5 * (h.y + h.z) + (h.y * h.z) / 3) * e),
(s.y *= Math.sqrt(1 - 0.5 * (h.z + h.x) + (h.z * h.x) / 3) * e),
(s.z *= Math.sqrt(1 - 0.5 * (h.x + h.y) + (h.x * h.y) / 3) * e),
d.push(s.x, s.y, s.z),
i.set(s.x, s.y, s.z).normalize(),
l.push(i.x, i.y, i.z);
function c(e, r, u, s, h, i, d, l, c, x, z) {
var m,
b,
v = i / c,
w = d / x,
B = i / 2,
A = d / 2,
G = l / 2,
V = c + 1,
E = x + 1,
g = 0,
F = 0,
j = new t.Vector3();
for (b = 0; b < E; b++) {
var M = b * w - A;
for (m = 0; m < V; m++) {
var H = m * v - B;
(j[e] = H * s),
(j[r] = M * h),
(j[u] = G),
p.push(j.x, j.y, j.z),
(j[e] = 0),
(j[r] = 0),
(j[u] = l > 0 ? 1 : -1),
y.push(m / c),
y.push(1 - b / x),
(g += 1);
}
}
for (b = 0; b < x; b++)
for (m = 0; m < c; m++) {
var T = f + m + V * b,
q = f + m + V * (b + 1),
I = f + (m + 1) + V * (b + 1),
R = f + (m + 1) + V * b;
n.push(T, q, R), n.push(q, I, R), (F += 6);
}
o.addGroup(a, F, z), (a += F), (f += g);
}
this.setIndex(n),
this.addAttribute("position", new t.Float32BufferAttribute(d, 3)),
this.addAttribute("normal", new t.Float32BufferAttribute(l, 3)),
this.addAttribute("uv", new t.Float32BufferAttribute(y, 2));
}
(s.prototype = Object.create(t.BufferGeometry.prototype)),
(s.prototype.constructor = s);
var h = s;
THREE.NormalizedCubeBufferGeometry = r;
THREE.IcosahedronBufferGeometry = u;
return (THREE.SpherifiedCubeBufferGeometry = h), h;
});
