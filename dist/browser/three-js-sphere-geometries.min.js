!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = t(require("three-full")))
: "function" == typeof define && define.amd
? define(["three-full"], t)
: (e.THREESphereGeometries = t(e.THREE));
})(this, function(e) {
"use strict";
function t(t, r) {
e.IcosahedronBufferGeometry.call(this, t, r),
(this.type = "IcosahedronSphereBufferGeometry");
}
(e = e && e.hasOwnProperty("default") ? e.default : e),
(t.prototype = Object.create(e.BufferGeometry.prototype)),
(t.prototype.constructor = t);
var r = t;
function o(t, r) {
e.BufferGeometry.call(this),
(this.type = "SpherifiedCubeBufferGeometry"),
(t = t || 1),
(r = r || 8),
(this.parameters = {radius: t, widthHeightSegments: r});
var o,
u = new e.Vector3(),
f = new e.Vector3(),
a = new e.Vector3(),
i = [],
n = [],
h = [],
y = new e.BoxBufferGeometry(1, 1, 1, r, r, r);
y.getAttribute("position").array.forEach(e => {
n.push(e);
}),
y.getAttribute("normal").array.forEach(e => {}),
y.getAttribute("uv").array.forEach(e => {
h.push(e);
}),
y.index.array.forEach(e => {
i.push(e);
});
var s = [],
p = [];
for (o = 0; o < n.length; o += 3)
(u.x = 2 * n[o]),
(u.y = 2 * n[o + 1]),
(u.z = 2 * n[o + 2]),
(f.x = u.x ** 2),
(f.y = u.y ** 2),
(f.z = u.z ** 2),
(u.x *= Math.sqrt(1 - 0.5 * (f.y + f.z) + (f.y * f.z) / 3) * t),
(u.y *= Math.sqrt(1 - 0.5 * (f.z + f.x) + (f.z * f.x) / 3) * t),
(u.z *= Math.sqrt(1 - 0.5 * (f.x + f.y) + (f.x * f.y) / 3) * t),
s.push(u.x, u.y, u.z),
a.set(u.x, u.y, u.z).normalize(),
p.push(a.x, a.y, a.z);
this.setIndex(i),
this.addAttribute("position", new e.Float32BufferAttribute(s, 3)),
this.addAttribute("normal", new e.Float32BufferAttribute(p, 3)),
this.addAttribute("uv", new e.Float32BufferAttribute(h, 2));
}
(o.prototype = Object.create(e.BufferGeometry.prototype)),
(o.prototype.constructor = o);
var u = o;
function f(t, r) {
e.BufferGeometry.call(this),
(this.type = "RoundedCubeBufferGeometry"),
(t = t || 1),
(r = r || 8),
(this.parameters = {radius: t, widthHeightSegments: r});
var o,
u = new e.Vector3(),
f = new e.Vector3(),
a = [],
i = [],
n = [],
h = new e.BoxBufferGeometry(1, 1, 1, r, r, r);
h.getAttribute("position").array.forEach(e => {
i.push(e);
}),
h.getAttribute("normal").array.forEach(e => {}),
h.getAttribute("uv").array.forEach(e => {
n.push(e);
}),
h.index.array.forEach(e => {
a.push(e);
});
var y = [],
s = [];
for (o = 0; o < i.length; o += 3)
(u.x = i[o]),
(u.y = i[o + 1]),
(u.z = i[o + 2]),
u.normalize(),
u.multiplyScalar(t),
y.push(u.x, u.y, u.z),
f.set(u.x, u.y, u.z).normalize(),
s.push(f.x, f.y, f.z);
this.setIndex(a),
this.addAttribute("position", new e.Float32BufferAttribute(y, 3)),
this.addAttribute("normal", new e.Float32BufferAttribute(s, 3)),
this.addAttribute("uv", new e.Float32BufferAttribute(n, 2));
}
(f.prototype = Object.create(e.BufferGeometry.prototype)),
(f.prototype.constructor = f);
var a = {
IcosahedronSphereBufferGeometry: r,
SpherifiedCubeBufferGeometry: u,
RoundedCubeBufferGeometry: f
};
return (
(e.IcosahedronSphereBufferGeometry = a.IcosahedronSphereBufferGeometry),
(e.SpherifiedCubeBufferGeometry = a.SpherifiedCubeBufferGeometry),
(e.RoundedCubeBufferGeometry = a.RoundedCubeBufferGeometry),
a
);
});
