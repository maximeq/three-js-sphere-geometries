!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? t(exports, require("three"))
: "function" == typeof define && define.amd
? define(["exports", "three"], t)
: t((e.THREESphereGeometries = {}), e.THREE);
})(this, function(e, t) {
"use strict";
class r extends t.IcosahedronBufferGeometry {
constructor(e, t) {
super(e, t), (this.type = "IcosahedronSphereBufferGeometry");
}
}
((t =
t && t.hasOwnProperty("default")
? t.default
: t).IcosahedronSphereBufferGeometry = r),
(t.SpherifiedCubeBufferGeometry = class extends t.BufferGeometry {
constructor(e, r) {
super(),
(this.type = "SpherifiedCubeBufferGeometry"),
(e = e || 1),
(r = r || 8),
(this.parameters = {radius: e, widthHeightSegments: r});
var o = new t.Vector3(),
u = new t.Vector3(),
s = new t.Vector3(),
i = [],
n = [],
f = [],
a = [],
h = new t.BoxBufferGeometry(1, 1, 1, r, r, r);
let l = h.getAttribute("position").array;
for (let e = 0; e < l.length; ++e) n.push(l[e]);
let y = h.getAttribute("normal").array;
for (let e = 0; e < y.length; ++e) f.push(y[e]);
let p = h.getAttribute("uv").array;
for (let e = 0; e < p.length; ++e) a.push(p[e]);
let d = h.index.array;
for (let e = 0; e < d.length; ++e) i.push(d[e]);
var m,
x = [],
c = [];
for (m = 0; m < n.length; m += 3)
(o.x = 2 * n[m]),
(o.y = 2 * n[m + 1]),
(o.z = 2 * n[m + 2]),
(u.x = o.x ** 2),
(u.y = o.y ** 2),
(u.z = o.z ** 2),
(o.x *= Math.sqrt(1 - 0.5 * (u.y + u.z) + (u.y * u.z) / 3) * e),
(o.y *= Math.sqrt(1 - 0.5 * (u.z + u.x) + (u.z * u.x) / 3) * e),
(o.z *= Math.sqrt(1 - 0.5 * (u.x + u.y) + (u.x * u.y) / 3) * e),
x.push(o.x, o.y, o.z),
s.set(o.x, o.y, o.z).normalize(),
c.push(s.x, s.y, s.z);
this.setIndex(i),
this.setAttribute("position", new t.Float32BufferAttribute(x, 3)),
this.setAttribute("normal", new t.Float32BufferAttribute(c, 3)),
this.setAttribute("uv", new t.Float32BufferAttribute(a, 2));
}
}),
(t.RoundedCubeBufferGeometry = class extends t.BufferGeometry {
constructor(e, r) {
super(),
(this.type = "RoundedCubeBufferGeometry"),
(e = e || 1),
(r = r || 8),
(this.parameters = {radius: e, widthHeightSegments: r});
var o = new t.Vector3(),
u = new t.Vector3(),
s = [],
i = [],
n = [],
f = [],
a = new t.BoxBufferGeometry(1, 1, 1, r, r, r);
let h = a.getAttribute("position").array;
for (let e = 0; e < h.length; ++e) i.push(h[e]);
let l = a.getAttribute("normal").array;
for (let e = 0; e < l.length; ++e) n.push(l[e]);
let y = a.getAttribute("uv").array;
for (let e = 0; e < y.length; ++e) f.push(y[e]);
let p = a.index.array;
for (let e = 0; e < p.length; ++e) s.push(p[e]);
var d,
m = [],
x = [];
for (d = 0; d < i.length; d += 3)
(o.x = i[d]),
(o.y = i[d + 1]),
(o.z = i[d + 2]),
o.normalize(),
o.multiplyScalar(e),
m.push(o.x, o.y, o.z),
u.set(o.x, o.y, o.z).normalize(),
x.push(u.x, u.y, u.z);
this.setIndex(s),
this.setAttribute("position", new t.Float32BufferAttribute(m, 3)),
this.setAttribute("normal", new t.Float32BufferAttribute(x, 3)),
this.setAttribute("uv", new t.Float32BufferAttribute(f, 2));
}
}),
(e.IcosahedronSphereBufferGeometry = r),
Object.defineProperty(e, "__esModule", {value: !0});
});
