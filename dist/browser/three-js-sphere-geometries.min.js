!(function(t, e) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = e(require("three-full/builds/Three.cjs.js")))
: "function" == typeof define && define.amd
? define(["three-full/builds/Three.cjs.js"], e)
: (t.THREESphereCubeBufferGeometry = e(t.THREE));
})(this, function(t) {
"use strict";
function e(e, r) {
t.BufferGeometry.call(this),
(this.type = "SphereCubeBufferGeometry"),
(this.parameters = {radius: e, widthHeightSegments: r});
var u = this;
(e = e || 1), (r = Math.max(3, Math.floor(r) || 8));
var h,
s = new t.Vector3(),
o = new t.Vector3(),
p = 0,
n = 0,
i = [],
f = [],
a = [];
d("z", "y", "x", -1, -1, 1, 1, 1, r, r, 0),
d("z", "y", "x", 1, -1, 1, 1, -1, r, r, 1),
d("x", "z", "y", 1, 1, 1, 1, 1, r, r, 2),
d("x", "z", "y", 1, -1, 1, 1, -1, r, r, 3),
d("x", "y", "z", 1, -1, 1, 1, 1, r, r, 4),
d("x", "y", "z", -1, -1, 1, 1, -1, r, r, 5);
var l = [],
y = [];
for (h = 0; h < f.length; h += 3)
(s.x = f[h]),
(s.y = f[h + 1]),
(s.z = f[h + 2]),
s.normalize(),
(s.x *= e),
(s.y *= e),
(s.z *= e),
l.push(s.x, s.y, s.z),
o.set(s.x, s.y, s.z).normalize(),
y.push(o.x, o.y, o.z);
function d(e, r, h, s, o, l, y, d, c, x, v) {
var b,
m,
z = l / c,
g = y / x,
w = l / 2,
B = y / 2,
A = d / 2,
G = c + 1,
E = x + 1,
V = 0,
j = 0,
F = new t.Vector3();
for (m = 0; m < E; m++) {
var I = m * g - B;
for (b = 0; b < G; b++) {
var S = b * z - w;
(F[e] = S * s),
(F[r] = I * o),
(F[h] = A),
f.push(F.x, F.y, F.z),
(F[e] = 0),
(F[r] = 0),
(F[h] = d > 0 ? 1 : -1),
a.push(b / c),
a.push(1 - m / x),
(V += 1);
}
}
for (m = 0; m < x; m++)
for (b = 0; b < c; b++) {
var T = p + b + G * m,
H = p + b + G * (m + 1),
M = p + (b + 1) + G * (m + 1),
R = p + (b + 1) + G * m;
i.push(T, H, R), i.push(H, M, R), (j += 6);
}
u.addGroup(n, j, v), (n += j), (p += V);
}
this.setIndex(i),
this.addAttribute("position", new t.Float32BufferAttribute(l, 3)),
this.addAttribute("normal", new t.Float32BufferAttribute(y, 3)),
this.addAttribute("uv", new t.Float32BufferAttribute(a, 2));
}
(t = t && t.hasOwnProperty("default") ? t.default : t),
(e.prototype = Object.create(t.BufferGeometry.prototype)),
(e.prototype.constructor = e);
function r(e, r, u, h, s, o) {
t.BufferGeometry.call(this),
(this.type = "IsocahedronBufferGeometry"),
(this.parameters = {
radius: e,
subdivisionsLevel: r,
phiStart: u,
phiLength: h,
thetaStart: s,
thetaLength: o
}),
(e = e || 1),
(u = void 0 !== u ? u : 0),
(h = void 0 !== h ? h : 2 * Math.PI),
(s = void 0 !== s ? s : 0),
(o = void 0 !== o ? o : Math.PI);
new t.Vector3();
var p,
n = new t.Vector3(),
i = [],
f = [],
a = [];
function l(e, r) {
let u = new t.Vector3(f[3 * e], f[3 * e + 1], f[3 * e + 2]),
h = new t.Vector3(f[3 * r], f[3 * r + 1], f[3 * r + 2]);
var s = new t.Vector3((u.x + h.x) / 2, (u.y + h.y) / 2, (u.z + h.z) / 2);
return console.log(u, h, s), s;
}
(p = (1 + Math.sqrt(5)) / 2),
f.push(-1, p, 0),
f.push(1, p, 0),
f.push(-1, -p, 0),
f.push(1, -p, 0),
f.push(0, -1, p),
f.push(0, 1, p),
f.push(0, -1, -p),
f.push(0, 1, -p),
f.push(p, 0, -1),
f.push(p, 0, 1),
f.push(-p, 0, -1),
f.push(-p, 0, 1),
i.push(0, 11, 5),
i.push(0, 5, 1),
i.push(0, 1, 7),
i.push(0, 7, 10),
i.push(0, 10, 11),
i.push(1, 5, 9),
i.push(5, 11, 4),
i.push(11, 10, 2),
i.push(10, 7, 6),
i.push(7, 1, 8),
i.push(3, 9, 4),
i.push(3, 4, 2),
i.push(3, 2, 6),
i.push(3, 6, 8),
i.push(3, 8, 9),
i.push(4, 9, 5),
i.push(2, 4, 11),
i.push(6, 2, 10),
i.push(8, 6, 7),
i.push(9, 8, 1),
(function() {
for (var t = 0; t < r - 1; t++) {
var e = [];
for (let t = 0; t < i.length; t += 3) {
let r = i[t],
o = i[t + 1],
p = i[t + 2];
var u = l(r, o),
h = l(o, p),
s = l(p, r);
f.push(u.x, u.y, u.z),
f.push(h.x, h.y, h.z),
f.push(s.x, s.y, s.z),
e.push(r, f.length - 3, f.length - 1),
e.push(o, f.length - 2, f.length - 3),
e.push(p, f.length - 1, f.length - 2),
e.push(f.length - 3, f.length - 2, f.length - 1);
}
i = e;
}
})(),
(function() {
for (let t = 0; t < i.length; t += 3) {
let e = i[t],
r = i[t + 1],
u = i[t + 2];
n.set(e, r, u).normalize(), a.push(n.x, n.y, n.z);
}
})(),
this.setIndex(i),
this.addAttribute("position", new t.Float32BufferAttribute(f, 3)),
this.addAttribute("normal", new t.Float32BufferAttribute(a, 3)),
this.addAttribute("uv", new t.Float32BufferAttribute([], 2));
}
(r.prototype = Object.create(t.BufferGeometry.prototype)),
(r.prototype.constructor = r);
var u = r;
THREE.SphereCubeBufferGeometry = u;
var h = u;
return (THREE.IsocahedronBufferGeometry = h), h;
});
