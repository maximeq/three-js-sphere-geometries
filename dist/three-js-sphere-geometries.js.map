{"version":3,"file":"three-js-sphere-geometries.js","sources":["../src/IcosahedronSphereBufferGeometry.js","../src/SpherifiedCubeBufferGeometry.js","../src/RoundedCubeBufferGeometry.js","../src/exports.js"],"sourcesContent":["import THREE from 'three';\n\n/**\n * @author baptistewagner & lucassort\n */\n\nexport class IcosahedronSphereBufferGeometry extends THREE.IcosahedronBufferGeometry {\n    constructor(radius, subdivisionsLevel) {\n        super(radius, subdivisionsLevel);\n\n        this.type = \"IcosahedronSphereBufferGeometry\";\n\n        var scope = this;\n    }\n}\n","import THREE from 'three';\n\nexport class SpherifiedCubeBufferGeometry extends THREE.BufferGeometry {\n    constructor(radius, widthHeightSegments) {\n        super();\n\n        this.type = \"SpherifiedCubeBufferGeometry\";\n\n        radius = radius || 1;\n\n        widthHeightSegments = widthHeightSegments || 8;\n\n        this.parameters = {\n            radius: radius,\n            widthHeightSegments: widthHeightSegments,\n        };\n\n        var scope = this;\n\n        // generate cube\n        var ix, iy;\n        var depth = 1;\n        var height = 1;\n        var width = 1;\n\n        var vertex = new THREE.Vector3();\n        var vertex2 = new THREE.Vector3();\n        var normal = new THREE.Vector3();\n\n        var numberOfVertices = 0;\n        var groupStart = 0;\n\n        // buffers\n\n        var indices = [];\n        var vertices = [];\n        var normals = [];\n        var uvs = [];\n\n        // we create a normal cube and buffer it in our geometry\n\n        var cubeBufferGeometry = new THREE.BoxBufferGeometry(\n            1,\n            1,\n            1,\n            widthHeightSegments,\n            widthHeightSegments,\n            widthHeightSegments\n        );\n\n        let positionArray = cubeBufferGeometry.getAttribute(\"position\").array;\n        for (let i = 0; i < positionArray.length; ++i) {\n            vertices.push(positionArray[i]);\n        }\n\n        let normalArray = cubeBufferGeometry.getAttribute(\"normal\").array;\n        for (let i = 0; i < normalArray.length; ++i) {\n            normals.push(normalArray[i]);\n        }\n\n        let uvArray = cubeBufferGeometry.getAttribute(\"uv\").array;\n        for (let i = 0; i < uvArray.length; ++i) {\n            uvs.push(uvArray[i]);\n        }\n\n        let indexArray = cubeBufferGeometry.index.array;\n        for (let i = 0; i < indexArray.length; ++i) {\n            indices.push(indexArray[i]);\n        }\n\n        // then normalizing the cube to have a sphere\n\n        var vIndex;\n\n        var verticesSphere = [];\n        var normalsSphere = [];\n\n        // generate vertices, normals and uvs\n\n        for (vIndex = 0; vIndex < vertices.length; vIndex += 3) {\n            vertex.x = vertices[vIndex] * 2.0;\n            vertex.y = vertices[vIndex + 1] * 2.0;\n            vertex.z = vertices[vIndex + 2] * 2.0;\n\n            // normalize to have sphere vertex\n\n            vertex2.x = vertex.x ** 2;\n            vertex2.y = vertex.y ** 2;\n            vertex2.z = vertex.z ** 2;\n\n            vertex.x *=\n                Math.sqrt(\n                    1.0 -\n                        0.5 * (vertex2.y + vertex2.z) +\n                        (vertex2.y * vertex2.z) / 3.0\n                ) * radius;\n            vertex.y *=\n                Math.sqrt(\n                    1.0 -\n                        0.5 * (vertex2.z + vertex2.x) +\n                        (vertex2.z * vertex2.x) / 3.0\n                ) * radius;\n            vertex.z *=\n                Math.sqrt(\n                    1.0 -\n                        0.5 * (vertex2.x + vertex2.y) +\n                        (vertex2.x * vertex2.y) / 3.0\n                ) * radius;\n\n            verticesSphere.push(vertex.x, vertex.y, vertex.z);\n\n            // normal\n\n            normal.set(vertex.x, vertex.y, vertex.z).normalize();\n            normalsSphere.push(normal.x, normal.y, normal.z);\n        }\n\n        // build geometry\n\n        this.setIndex(indices);\n        this.setAttribute(\n            \"position\",\n            new THREE.Float32BufferAttribute(verticesSphere, 3)\n        );\n        this.setAttribute(\n            \"normal\",\n            new THREE.Float32BufferAttribute(normalsSphere, 3)\n        );\n        this.setAttribute(\"uv\", new THREE.Float32BufferAttribute(uvs, 2));\n    }\n}","import THREE from 'three';\n\n/**\n * @author baptistewagner & lucassort\n */\n\nexport class RoundedCubeBufferGeometry extends THREE.BufferGeometry {\n    constructor(radius, widthHeightSegments) {\n        super();\n\n        this.type = \"RoundedCubeBufferGeometry\";\n\n        radius = radius || 1;\n\n        widthHeightSegments = widthHeightSegments || 8;\n\n        this.parameters = {\n            radius: radius,\n            widthHeightSegments: widthHeightSegments,\n        };\n\n        var scope = this;\n\n        var vertex = new THREE.Vector3();\n        var normal = new THREE.Vector3();\n\n        // buffers\n\n        var indices = [];\n        var vertices = [];\n        var normals = [];\n        var uvs = [];\n\n        // we create a normal cube and buffer it in our geometry\n\n        var cubeBufferGeometry = new THREE.BoxBufferGeometry(\n            1,\n            1,\n            1,\n            widthHeightSegments,\n            widthHeightSegments,\n            widthHeightSegments\n        );\n\n        let positionArray = cubeBufferGeometry.getAttribute(\"position\").array;\n        for (let i = 0; i < positionArray.length; ++i){\n            vertices.push(positionArray[i]);\n        }\n\n        let normalArray = cubeBufferGeometry.getAttribute(\"normal\").array;\n        for (let i = 0; i < normalArray.length; ++i) {\n            normals.push(normalArray[i]);\n        }\n\n        let uvArray = cubeBufferGeometry.getAttribute(\"uv\").array;\n        for (let i = 0; i < uvArray.length; ++i) {\n            uvs.push(uvArray[i]);\n        }\n\n        let indexArray = cubeBufferGeometry.index.array;\n        for (let i = 0; i < indexArray.length; ++i) {\n            indices.push(indexArray[i]);\n        }\n\n        // then normalizing the cube to have a sphere\n\n        var vIndex;\n\n        var verticesSphere = [];\n        var normalsSphere = [];\n\n        // generate vertices, normals and uvs\n\n        for (vIndex = 0; vIndex < vertices.length; vIndex += 3) {\n            vertex.x = vertices[vIndex];\n            vertex.y = vertices[vIndex + 1];\n            vertex.z = vertices[vIndex + 2];\n\n            // normalize to have sphere vertex\n\n            vertex.normalize();\n            vertex.multiplyScalar(radius);\n            verticesSphere.push(vertex.x, vertex.y, vertex.z);\n\n            // normal\n\n            normal.set(vertex.x, vertex.y, vertex.z).normalize();\n            normalsSphere.push(normal.x, normal.y, normal.z);\n        }\n\n        // build geometry\n\n        this.setIndex(indices);\n        this.setAttribute(\n            \"position\",\n            new THREE.Float32BufferAttribute(verticesSphere, 3)\n        );\n        this.setAttribute(\n            \"normal\",\n            new THREE.Float32BufferAttribute(normalsSphere, 3)\n        );\n        this.setAttribute(\"uv\", new THREE.Float32BufferAttribute(uvs, 2));\n    }\n}\n","\nimport { IcosahedronSphereBufferGeometry } from \"./IcosahedronSphereBufferGeometry\";\nimport { SpherifiedCubeBufferGeometry } from \"./SpherifiedCubeBufferGeometry\";\nimport { RoundedCubeBufferGeometry } from \"./RoundedCubeBufferGeometry\";\n\nexport { IcosahedronSphereBufferGeometry }\n\n\nimport THREE from 'three';\n\nTHREE.IcosahedronSphereBufferGeometry = IcosahedronSphereBufferGeometry;\nTHREE.SpherifiedCubeBufferGeometry = SpherifiedCubeBufferGeometry;\nTHREE.RoundedCubeBufferGeometry = RoundedCubeBufferGeometry;\n"],"names":["THREE"],"mappings":"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"}